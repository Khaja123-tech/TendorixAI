version: '3.8'

services:
  # MongoDB Database
  mongo:
    image: mongo:5.0
    container_name: tendorix-mongo-prod
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DB_NAME}
    volumes:
      - mongo_data_prod:/data/db
    networks:
      - tendorix-network
    # Don't expose ports in production - access through backend only

  # Backend API Service
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: tendorix-backend-prod
    restart: always
    environment:
      - MONGO_URI=mongodb://${MONGO_ROOT_USERNAME}:${MONGO_ROOT_PASSWORD}@mongo:27017/${MONGO_DB_NAME}?authSource=admin
      - MONGO_DB_NAME=${MONGO_DB_NAME}
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=1440
      - AZURE_DOC_INTEL_ENDPOINT=${AZURE_DOC_INTEL_ENDPOINT}
      - AZURE_DOC_INTEL_KEY=${AZURE_DOC_INTEL_KEY}
      - AZURE_STORAGE_CONNECTION_STRING=${AZURE_STORAGE_CONNECTION_STRING}
      - AZURE_BLOB_CONTAINER=${AZURE_BLOB_CONTAINER}
      - AZURE_STORAGE_ACCOUNT_NAME=${AZURE_STORAGE_ACCOUNT_NAME}
      - AZURE_STORAGE_ACCOUNT_KEY=${AZURE_STORAGE_ACCOUNT_KEY}
      - HF_API_TOKEN=${HF_API_TOKEN}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    depends_on:
      - mongo
    networks:
      - tendorix-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Web Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: tendorix-frontend-prod
    restart: always
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NODE_ENV=production
    depends_on:
      - backend
    networks:
      - tendorix-network

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: tendorix-redis-prod
    restart: always
    volumes:
      - redis_data_prod:/data
    networks:
      - tendorix-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: tendorix-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - /var/log/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - tendorix-network

volumes:
  mongo_data_prod:
    driver: local
  redis_data_prod:
    driver: local

networks:
  tendorix-network:
    driver: bridge